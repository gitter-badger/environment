;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(query-replace-history minibuffer-history ido-buffer-history read-expression-history extended-command-history ido-file-history))
(setq query-replace-history '("d12" "d12frosted"))
(setq minibuffer-history '("org-bullets-bullet-list"))
(setq ido-buffer-history '("*Messages*" "gtd.org" "*Messages*" "gtd.org" "*Messages*"))
(setq read-expression-history '("(require 'org-journal)" "(require 'org-bullets)" "(org-bullets-mode 1)" "(org-bullets-mode)" "(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))"))
(setq extended-command-history '("calendar" "org-journal-mode" "calendar" "org-journal-mode" "calendar" "eval-defun" "ielm" "replace-string" "org-bullets-mode" "ielm" "d12/reload-config" "org-mode" "d12/reload-config" "org-mode" "d12/reload-config" "d12/toggle-fullscreen" "toggle-frame-maximized" "d12/toggle-fullscreen"))
(setq ido-file-history '("gtd.org" "configs.el" "2015-04-16" "configs.el" "gtd.org" "configs.el" "funcs.el" "configs.el" "gtd.org" "configs.el" "gtd.org" "configs.el" "funcs.el" "configs.el" "init.el" "configs.el" "funcs.el" "configs.el" "init.el" "configs.el" "gtd.org" "configs.el" "init.el" "org.el" "configs.el" "org-bullets.el" "configs.el" "gtd.org" "gtd.org_archive" "configs.el" "gtd.org" "configs.el" "funcs.el" "configs.el"))
(setq kill-ring '(#("ensure" 0 6 (face font-lock-builtin-face fontified t)) "requires" #("  (require 's)" 0 2 (fontified t) 2 3 (fontified t) 3 10 (face font-lock-keyword-face fontified t) 10 12 (fontified t) 12 13 (face font-lock-constant-face fontified t) 13 14 (fontified t)) "(setq use-package-debug" #("(setq use-package-debug" 0 6 (fontified t) 6 22 (fontified t) 22 23 (fontified t rear-nonsticky t)) "use-package-debug" #("  (require 'org-bullets)
  (require 'org-journal)
  (require 's)" 0 3 (fontified t) 3 10 (face font-lock-keyword-face fontified t) 10 12 (fontified t) 12 23 (face font-lock-constant-face fontified t) 23 28 (fontified t) 28 35 (face font-lock-keyword-face fontified t) 35 37 (fontified t) 37 48 (face font-lock-constant-face fontified t) 48 53 (fontified t) 53 60 (face font-lock-keyword-face fontified t) 60 62 (fontified t) 62 63 (face font-lock-constant-face fontified t) 63 64 (fontified t)) #("s-" 0 2 (fontified t)) "(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))" #("(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))" 0 32 (fontified t) 32 35 (fontified t face font-lock-string-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-string-face) 39 40 (fontified t) 40 43 (fontified t face font-lock-string-face) 43 44 (fontified t) 44 47 (fontified t face font-lock-string-face) 47 48 (fontified t) 48 51 (fontified t face font-lock-string-face) 51 53 (fontified t)) "(d12/directory-dirs directory)" #("(d12/directory-dirs directory)" 0 1 (fontified t) 1 20 (fontified t) 20 30 (fontified t)) #("org-dir-and-subdirs" 0 19 (fontified t face font-lock-function-name-face)) #("dir-and-subdirs" 0 15 (fontified t face font-lock-function-name-face)) "d12frosted/org-home-path \"~/Dropbox/org/\"
                d12frosted/org-author-name \"Boris Buliga\"
                d12frosted/org-author-email \"d12frosted@icloud.com\"" " (evil-leader/set-key \"ojc\" 'calendar)
    (evil-leader/set-key \"ojn\" 'org-journal-new-entry)
    (evil-leader/set-key \"ojv\" 'org-journal-visit-entry)" "(evil-leader/set-key-for-mode 'org-mode
      \"m C-s\" 'd12frosted/org-sort-current-level
      \"m C-S\" 'd12frosted/org-sort-upper-level
      \"m#\" 'd12frosted/org-insert-block-template
      \"m C-d\" 'd12frosted/org-insert-date
      \"m C-t\" 'd12frosted/org-insert-time)

    (spacemacs/declare-prefix \"oj\" \"org/journal\")

    (evil-leader/set-key \"ojl\" 'org-store-link)
    (evil-leader/set-key \"oit\" 'd12frosted/org-insert-time)
    (evil-leader/set-key \"oid\" 'd12frosted/org-insert-date)

    (add-hook 'org-mode-hook 'd12frosted/org-auto-insert-template))" "(defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
      (let ((rlt ad-return-value)
            (begin-regexp \"^[ \\t]*#\\\\+begin_\\\\(src\\\\|html\\\\|latex\\\\)\")
            (end-regexp \"^[ \\t]*#\\\\+end_\\\\(src\\\\|html\\\\|latex\\\\)\")
            old-flag
            b e)
        (when ad-return-value
          (save-excursion
            (setq old-flag case-fold-search)
            (setq case-fold-search t)
            (setq b (re-search-backward begin-regexp nil t))
            (if b (setq e (re-search-forward end-regexp nil t)))
            (setq case-fold-search old-flag))
          (if (and b e (< (point) e)) (setq rlt nil)))
        (setq ad-return-value rlt)))

    (setq org-todo-keywords
          '((sequence
             ;; The item is ready to be done at the earliest opportunity or
             ;; at the date (and maybe time) indicated in the SCHEDULED tag.
             ;; Some tasks are given a DEADLINE date which is useful for
             ;; scheduling the tasks during my daily planning.
             \"TODO(t)\"

             ;; I should use this tag when I start on a task, but if I clock
             ;; in to a TODO item, I don't really need this task.
             \"STARTED(s)\"

             ;; I did some work on this task but I am waiting for a response.
             ;; If I use this task I schedule the task into the future as a
             ;; reminder to follow up with some notes in the body of the task.
             \"WAITING(w)\"

             ;; Used to tag an activity that can only be done at the specified
             ;; time and date, instead of tasks that can be
             ;; completed at any time.
             \"APPT(a)\"

             \"|\"

             ;; The task is completed.
             \"DONE(d)\"

             ;; I decided not to do this task but have left the task on file
             ;; with this status.
             \"CANCELLED(c)\"

             ;; Used to identify a task that will not be activated just yet.
             ;; The reason will be included in the task notes.
             \"DELAYED(l)\"))

          org-agenda-window-setup 'current-window
          org-src-fontify-natively t
          org-directory d12frosted/org-home-path
          org-agenda-files d12/org-agenda-files
          org-agenda-inhibit-startup nil
          org-mobile-inbox-for-pull (s-concat d12frosted/org-home-path \"mobile.org\")
          org-mobile-force-id-on-agenda-items nil
          org-mobile-directory \"~/Dropbox/Apps/MobileOrg/\")" "(setq-local d12/org-ignored-dirs
                (-flatten
                 (-non-nil
                  (-map (lambda (dir)
                          (d12frosted/org-dir-and-subdirs dir))
                        d12frosted/org-agenda-ignore-dirs))))

    (setq-local d12/org-agenda-dirs
          (-difference (d12frosted/org-dir-and-subdirs \"\") d12/org-ignored-dirs))

    (setq-local d12/org-agenda-files
          (-flatten (-map (lambda (dir)
                            (d12frosted/org-files-in-folder dir))
                          d12/org-agenda-dirs)))" "(defvar d12frosted/org-home-path \"~/org/\"
  \"Directory where org files are stored.
   All org files in this directory and all subdirectories will be used as agenda
   files for org agenda. If you want to ignore some files, checkout
   'd12frosted/org-agenda-ignore-dirs variable. Currently you can ignore files
   only by putting them into ignored directory.
   Warning! Don't forget to add trailing slash at the end.\")

(defvar d12frosted/org-agenda-ignore-dirs
  '(\"temporary/\"
    \"tmp/\")
  \"List of directories to be ignored for agenda. Every path should be relative
   to d12frosted/org-home-path and must contain trailing slash.\")

(defvar d12frosted/org-time-format
  \"%H:%M:%S\"
  \"Format for 'd12frosted/org-insert-time function.\")

(defvar d12frosted/org-date-format
  \"%d %B %Y, %A\"
  \"Format for 'd12frosted/org-insert-date function.\")

(defvar d12frosted/org-default-title
  \"Yet another org file\"
  \"Default title for org files. Is used by 'd12frosted/org-guess-title
   when it failt to get the ttitle from buffer name.\")

(defvar d12frosted/org-author-name
  \"John Doe\"
  \"Author name (used in 'd12frosted/org-new-file-template function.)\")

(defvar d12frosted/org-author-email
  \"example@domain.com\"
  \"Author email (used in 'd12frosted/org-new-file-template function.)\")" "(setq org-journal-dir (s-concat d12frosted/org-home-path \"journal/\")
          org-journal-date-format \"%d %B %Y, %A\"
          org-journal-file-format \"%Y-%m-%d\"
          org-journal-file-pattern (org-journal-format-string->regex org-journal-file-format)
          org-journal-do-hide-entries-on-new nil))" "(\".*/[0-9]*-[0-9]*-[0-9]*$\" . org-mode)" "(global-unset-key (kbd \"C-c C-j\")" #("d12frosted" 0 10 (fontified t face font-lock-function-name-face)) "(defun gtd ()
   (interactive)
   (find-file (s-concat d12frosted/org-home-path \"gtd.org\")))

(defun d12frosted/org-dir-and-subdirs (dir)
      (let ((org-dir (s-concat d12frosted/org-home-path dir)))
        (when (file-directory-p org-dir)
          (-insert-at 0 (s-chop-suffix \"/\" org-dir) (d12frosted/directory-dirs-r org-dir)))))

(defun d12frosted/org-files-in-folder (folder)
  (directory-files folder t \".*\\.org$\"))

(defun d12frosted/org-insert-block-template ()
  \"Insert block template at point.\"
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '((\"s\" . \"SRC\")
                      (\"e\" . \"EXAMPLE\")
                      (\"h\" . \"HTML\")
                      (\"q\" . \"QUOTE\")
                      (\"c\" . \"CENTER\")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize \"Template type: \" 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            \": \"
                                            (cdr choice)))
                                  choices
                                  \", \")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert \"\\n#+END_\" choice)
                (goto-char start)
                (insert \"#+BEGIN_\" choice \"\\n\")))
             (t
              (insert \"#+BEGIN_\" choice \"\\n\")
              (save-excursion (insert \"\\n#+END_\" choice))))))))))

(defun d12frosted/org-guess-title ()
  \"Try to guess title for org file.
In case of failure it will use value of d12frosted/org-default-title.\"
  (let ((bname (buffer-name)))
    (if (s-present? bname)
        (if (s-suffix? \".org\" bname)
            (substring bname 0 -4)
          bname)
      d12frosted/org-default-title)))

(defun d12frosted/org-new-file-template ()
  \"Create template for new org file.\"
  (let ((option-key-width 16)
        (title (d12frosted/org-guess-title))
        (author (s-format \"$0 <$1>\" 'elt `(,d12frosted/org-author-name ,d12frosted/org-author-email)))
        (email d12frosted/org-author-email)
        (date (format-time-string \"%Y-%m-%d\")))
    (s-join \"\\n\" (list (d12frosted/org-option option-key-width \"TITLE\" title)
                       (d12frosted/org-option option-key-width \"AUTHOR\" author)
                       (d12frosted/org-option option-key-width \"EMAIL\" email)
                       (d12frosted/org-option option-key-width \"DATE\" date)
                       (d12frosted/org-option option-key-width \"STARTUP\" \"showeverything\")
                       (d12frosted/org-option option-key-width \"OPTIONS\" \"toc:t\")))))

(defun d12frosted/org-option (width key value)
  \"Create an option string for org file.\"
  (s-append value (s-pad-right width \" \" (s-concat \"#+\" key \":\"))))

(defun d12frosted/org-buffer-contains-header? ()
  \"Does current buffer contains org header?\"
  (interactive)
  (let ((empty (= (point-min)
                  (point-max)))
        (titled (s-starts-with? \"#+TITLE:\" (buffer-string) t)))
    (and titled (not empty))))

(defun d12frosted/org-auto-insert-template ()
  \"Insert template for the newly created buffer.\"
  (interactive)
  (when (not (d12frosted/org-buffer-contains-header?))
    (goto-char (point-min))
    (insert (d12frosted/org-new-file-template))
    (insert \"\\n\\n\")
    (goto-char (point-max))))

(defun d12frosted/org-sort-current-level ()
  \"Sort current level by TODO.\"
  (interactive)
  (org-sort-entries nil ?o))

(defun d12frosted/org-sort-upper-level ()
  \"Go to upper level and sort it by TODO.\"
  (interactive)
  (progn (outline-up-heading 1)
         (d12frosted/org-sort-current-level)))

(defun d12frosted/org-create-new-org-file (name)
  (interactive \"sEnter the name of new file: \")

  (let ((existing-files (d12frosted/directory-dirs d12frosted/org-home-path))
        (new-file-dir (s-concat d12frosted/org-home-path name) ))
    (if (-contains? existing-files new-file-dir)
        (message \"Sorry, but there is already file named '%s'.\" name)
      (progn (dired-create-directory new-file-dir)
             (dired-create-directory (s-concat new-file-dir \"exports\"))
             (dired-create-directory (s-concat new-file-dir \"assets\"))
             (with-temp-buffer (write-file (s-concat new-file-dir (s-append \".org\" name))))))))

(defun d12frosted/org-insert-date ()
  \"Insert timestamp formated by value of d12frosted/org-date-format\"
  (interactive)
  (insert (format-time-string d12frosted/org-date-format)))

(defun d12frosted/org-insert-time ()
  \"Insert timestamp formated by value of d12frosted/org-time-format\"
  (interactive)
  (insert (format-time-string d12frosted/org-time-format)))

(defun org-journal-visit-entry ()
  (interactive)
  (setq current-prefix-arg '(t))
  (call-interactively 'org-journal-new-entry))" #("(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))" 0 32 (fontified t) 32 35 (face font-lock-string-face fontified t) 35 36 (fontified t) 36 39 (face font-lock-string-face fontified t) 39 40 (fontified t) 40 43 (face font-lock-string-face fontified t) 43 44 (fontified t) 44 47 (face font-lock-string-face fontified t) 47 48 (fontified t) 48 51 (face font-lock-string-face fontified t) 51 53 (fontified t)) #("(add-hook 'org-mode-hook 'org-bullets-mode)" 0 43 (fontified t)) "git@github.com:d12frosted/org-journal.git" #("(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))" 0 53 (fontified t face font-lock-comment-face)) #("  (add-hook 'org-mode-hook 'org-bullets-mode)" 0 45 (fontified t)) #("(add-hook 'org-mode-hook 'org-bullets-mode))" 0 44 (fontified t)) "(use-package org-bullets
  :defer 1
  :init
  (message \"org-bullets init\")
  (add-hook 'org-mode-hook 'org-bullets-mode)
  :config
  (message \"org-bullets config\")
  (setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\")))" #("(use-package org-bullets
  :defer 1
  :init
  (message \"org-bullets init\")
  (add-hook 'org-mode-hook 'org-bullets-mode)
  :config
  (message \"org-bullets config\")
  (setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\")))" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 24 (fontified t face font-lock-constant-face) 24 25 (fontified t) 25 27 (fontified t) 27 33 (fontified t face font-lock-builtin-face) 33 36 (fontified t) 36 38 (fontified t) 38 43 (fontified t face font-lock-builtin-face) 43 44 (fontified t) 44 55 (fontified t) 55 73 (fontified t face font-lock-string-face) 73 123 (fontified t) 123 130 (fontified t face font-lock-builtin-face) 130 142 (fontified t) 142 162 (fontified t face font-lock-string-face) 162 164 (fontified t) 164 198 (fontified t) 198 201 (fontified t face font-lock-string-face) 201 202 (fontified t) 202 205 (fontified t face font-lock-string-face) 205 206 (fontified t) 206 209 (fontified t face font-lock-string-face) 209 210 (fontified t) 210 213 (fontified t face font-lock-string-face) 213 214 (fontified t) 214 217 (fontified t face font-lock-string-face) 217 220 (fontified t)) "lambda () (" #("lambda () (" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) #("(use-package org-bullets
  :defer t
  :init
  (message \"org-bullets init\")
  ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  :config
  (message \"org-bullets config\")
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\")))" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 24 (face font-lock-constant-face fontified t) 24 25 (fontified t) 25 27 (fontified t) 27 33 (face font-lock-builtin-face fontified t) 33 36 (fontified t) 36 38 (fontified t) 38 43 (face font-lock-builtin-face fontified t) 43 44 (fontified t) 44 55 (fontified t) 55 73 (face font-lock-string-face fontified t) 73 77 (fontified t) 77 80 (face font-lock-comment-delimiter-face fontified t) 80 139 (face font-lock-comment-face fontified t) 139 141 (fontified t) 141 148 (face font-lock-builtin-face fontified t) 148 160 (fontified t) 160 180 (face font-lock-string-face fontified t) 180 210 (fontified t) 210 216 (face font-lock-keyword-face fontified t) 216 277 (fontified t) 277 280 (face font-lock-string-face fontified t) 280 281 (fontified t) 281 284 (face font-lock-string-face fontified t) 284 285 (fontified t) 285 288 (face font-lock-string-face fontified t) 288 289 (fontified t) 289 292 (face font-lock-string-face fontified t) 292 293 (fontified t) 293 296 (face font-lock-string-face fontified t) 296 299 (fontified t)) "(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" #("(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" 0 58 (face font-lock-comment-face fontified t)) "(use-package org-bullets
    :defer t
    :init (add-hook 'org-mode-hook 'org-bullets-mode))" "(use-package org-bullets
    :defer t
    :init (add-hook 'org-mode-hook 'org-bullets-mode))" #("init" 0 4 (face font-lock-string-face fontified t)) #("(message \"org-bullets init\")" 0 9 (fontified t) 9 27 (face font-lock-string-face fontified t) 27 28 (fontified t rear-nonsticky t)) #("(message \"org-indent init\")" 0 9 (fontified t) 9 26 (face font-lock-string-face fontified t) 26 27 (rear-nonsticky t fontified t)) #("(message \"org config\")" 0 9 (fontified t) 9 21 (face font-lock-string-face fontified t) 21 22 (fontified t)) #(" (message \"org config\")" 0 10 (fontified t) 10 22 (face font-lock-string-face fontified t) 22 23 (fontified t)) "  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" #("  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" 0 28 (fontified t) 28 34 (face font-lock-keyword-face fontified t) 34 60 (fontified t)) "(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" "(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))" "(org-bullets-mode 1)" #("(add-hook 'org-mode-hook 'org-indent-mode)" 0 42 (fontified t)) #("  (add-hook 'org-mode-hook 'org-bullets-mode)" 0 45 (fontified t)) #("(use-package org-bullets
  :defer t
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode)
  :config
  (message \"hello\")
  (setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\")))" 0 1 (fontified t) 1 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 24 (fontified t face font-lock-constant-face) 24 27 (fontified t) 27 33 (fontified t face font-lock-builtin-face) 33 38 (fontified t) 38 43 (fontified t face font-lock-builtin-face) 43 90 (fontified t) 90 92 (fontified t) 92 99 (fontified t face font-lock-builtin-face) 99 100 (fontified t) 100 111 (fontified t) 111 118 (fontified t face font-lock-string-face) 118 119 (fontified t) 119 120 (fontified t) 120 154 (fontified t) 154 155 (fontified t face font-lock-string-face) 155 156 (fontified t face font-lock-string-face) 156 157 (fontified t face font-lock-string-face) 157 158 (fontified t) 158 159 (fontified t face font-lock-string-face) 159 160 (fontified t face font-lock-string-face) 160 161 (fontified t face font-lock-string-face) 161 162 (fontified t) 162 163 (fontified t face font-lock-string-face) 163 164 (fontified t face font-lock-string-face) 164 165 (fontified t face font-lock-string-face) 165 166 (fontified t) 166 167 (fontified t face font-lock-string-face) 167 168 (fontified t face font-lock-string-face) 168 169 (fontified t face font-lock-string-face) 169 170 (fontified t) 170 171 (fontified t face font-lock-string-face) 171 172 (fontified t face font-lock-string-face) 172 173 (fontified t face font-lock-string-face) 173 176 (fontified t)) #("(setq org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" \"✸\"))" 0 32 (fontified t) 32 35 (fontified t face font-lock-string-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-string-face) 39 40 (fontified t) 40 43 (fontified t face font-lock-string-face) 43 44 (fontified t) 44 47 (fontified t face font-lock-string-face) 47 48 (fontified t) 48 51 (fontified t face font-lock-string-face) 51 53 (fontified t)) "default" #("default" 0 7 (fontified t)) "  (setq-default org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" " #("  (setq-default org-bullets-bullet-list '(\"◉\" \"○\" \"✿\" \"❀\" " 0 3 (fontified t) 3 16 (fontified t) 16 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t rear-nonsticky t face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 46 (fontified t) 46 49 (fontified t face font-lock-string-face) 49 50 (fontified t) 50 52 (fontified t face font-lock-string-face) 52 53 (rear-nonsticky t fontified t face font-lock-string-face) 53 54 (fontified t) 54 55 (fontified t face font-lock-string-face) 55 56 (rear-nonsticky t fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t)) "d12/toggle-fullscreen" #(" \"✸\"" 0 1 (fontified t) 1 4 (fontified t face font-lock-string-face))))
(setq mark-ring 'nil)
(setq global-mark-ring 'nil)
(setq search-ring '("s-" "dirs-r" "dirs"))
(setq regexp-search-ring 'nil)
(setq extended-command-history '("calendar" "org-journal-mode" "calendar" "org-journal-mode" "calendar" "eval-defun" "ielm" "replace-string" "org-bullets-mode" "ielm" "d12/reload-config" "org-mode" "d12/reload-config" "org-mode" "d12/reload-config" "d12/toggle-fullscreen" "toggle-frame-maximized" "d12/toggle-fullscreen"))
